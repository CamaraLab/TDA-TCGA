tpm<-read.csv("TPM.matrix.csv",row.names=1)
sum(apply(tpm,2,function(x) if (sum(x==0)==nrow(tpm)) {return (1)} else return(0)))
mut<-read.csv("Mut.matrix.csv",row.names=1)
sum(apply(mut,2,function(x) if (sum(x==0)==nrow(mut)) {return (1)} else return(0)))
cnv<-matrix1
colnames(cnv)
t<-cnv
2 %in% 1:5
identical<-NULL
ident<-NULL
d<-1000
mylist.names <- 1:d
mylist <- as.list(rep(0, length(mylist.names)))
mat<-cnv
ident<-NULL
for (i in 1:(d-1))
for (j in (i+1):d)
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[j]]<-c(mylist[[j]],j)
}
}
head(mylist)
rownames(cnv)
colnames(cnv)
mylist[[1]]<-0
head(mylist)
identical([mat,1],[mat,2])
identical(mat[,1],[mat[,2])
identical(mat[,1],mat[,2])
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[j]]<-c(mylist[[j]],j)
}
i
j
i<-1
j<-2
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[j]]<-c(mylist[[j]],j)
}
ident
ident<-NULL
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[j]]<-c(mylist[[j]],j)
}
ident
head(mylist)
ident<-NULL
d<-100
mylist.names <- 1:d
mylist <- as.list(rep(0, length(mylist.names)))
ident<-NULL
for (i in 1:(d-1))
for (j in (i+1):d)
if (j %in% ident) {mylist[[j]]<-0} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[i]]<-c(mylist[[i]],j)
}
}
head(mylist)
ident<-NULL
for (i in 1:(d-1))
for (j in (i+1):d)
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[i]]<-c(mylist[[i]],j)
}
}
head(mylist)
d<-100
mylist.names <- 1:d
mylist <- as.list(rep(0, length(mylist.names)))
ident<-NULL
for (i in 1:(d-1))
for (j in (i+1):d)
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[i]]<-c(mylist[[i]],j)
}
}
head(mylist)
tail(mylist)
d<-100
mylist.names <- 1:d
mylist <- as.list(rep(NA, length(mylist.names)))
ident<-NULL
for (i in 1:(d-1))
for (j in (i+1):d)
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[i]]<-c(mylist[[i]],j)
}
}
HEAD(MYLIST)
head(mylist)
d<-1000
mylist.names <- 1:d
mylist <- as.list(rep(NA, length(mylist.names)))
ident<-NULL
for (i in 1:(d-1))
for (j in (i+1):d)
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
mylist[[i]]<-c(mylist[[i]],j)
}
}
tail(mylist)
d<-list()
d<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1))
for (j in (i+1):d)
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
d<-c(d,b)
}
d
d[[1]]<-c(1,2,3)
d
d[1]<-c(1,2,3)
d<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1))
for (j in (i+1):d)
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
d[[i]]<-b
}
for (i in 1:(d-1)) {
d<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1)) {
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
d[[i]]<-b
}
d<-1000
for (i in 1:(d-1)) {
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
head(mylist)
d<-100
mylist<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1)) {
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b[i]<-c(b,j)
}
}
}
mylist[[i]]<-b[i]
}
d<-100
mylist<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
head(mylist)
tail(mylist)
sum(sapply(mylist,function(x) length(x)-1))
1000-sum(sapply(mylist,function(x) length(x)-1))
sum(sapply(mylist,function(x) length(x)-1))
d-sum(sapply(mylist,function(x) length(x)-1))
d<-1000
mylist<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
mylist
d-sum(sapply(mylist,function(x) length(x)-1))
d<-10000
mylist<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
d-sum(sapply(mylist,function(x) length(x)-1))
dim(mat)
20000*12/3600
16000*12/3600
mat<-mut
dim(mut)
x<-apply(mut,2,function(x) if (sum(x==0)==nrow(mut)) {return (1)} else return(0)))
x<-apply(mut,2,function(x) if (sum(x==0)==nrow(mut)) {return (1)} else return(0))
x
(x==1)
mat<-mat[,(x==1)]
dim(mat)
dim(mut)
class(ut)
class(mut)
mat<-as.matrix(mat)
colnames(mat)
d<-1000
mylist<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
mylist
d-sum(sapply(mylist,function(x) length(x)-1))
head(mylist)
d<-1000
mylist<-list()
b<-NULL
ident<-NULL
mat
mat[,1]
mat[,2]
b
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
mylist
head(mylist)
d-sum(sapply(mylist,function(x) length(x)-1))
d<-10000
mylist<-list()
b<-NULL
ident<-NULL
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
d<-2000
mylist<-list()
b<-NULL
ident<-NULL
#splitted<-split(d,ceiling(seq_along(d)/(d/4)))
#3sapply(splitted,function (splitted){
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
mylist
d-sum(sapply(mylist,function(x) length(x)-1))
identical(mat[,1],mat[,2])
identical(mat[,1],mat[,3])
identical(mat[,1],mat[,3022])
identical(mat[,1],mat[,21000])
identical(mut[,1],mut[,21000])
identical(mut[,1],mut[,2)
identical(mut[,1],mut[,2])
mat<-mut[,(x!=1)]
mat<-as.matrix(mat)
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
d<-2000
mylist<-list()
b<-NULL
ident<-NULL
#splitted<-split(d,ceiling(seq_along(d)/(d/4)))
#3sapply(splitted,function (splitted){
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
d-sum(sapply(mylist,function(x) length(x)-1))
d<-5000
mylist<-list()
b<-NULL
ident<-NULL
#splitted<-split(d,ceiling(seq_along(d)/(d/4)))
#3sapply(splitted,function (splitted){
for (i in 1:(d-1)) {
b<-i
for (j in (i+1):d)
{
if (j %in% ident) {mylist[[j]]<-j} else  {
if (identical(mat[,i],mat[,j])) {ident<-c(ident,j)
b<-c(b,j)
}
}
}
mylist[[i]]<-b
}
d-sum(sapply(mylist,function(x) length(x)-1))
dim(pii)
dim(pii_values)
pii_val<-read.csv("E:/Merging file/LUAD_Neigh_45_3_TPM.matrix.csv_pii_values_x.csv",row.names=FALSE)
pii_val<-read.csv("E:/Merging file/LUAD_Neigh_45_3_TPM.matrix.csv_pii_values_x.csv",row.names=FALSE)
?scan
scan("CNV_AMP_LUAD.matrix.csv")
q<-scan("CNV_AMP_LUAD.matrix.csv")
class(q)
pii_val<-read.csv("E:/Merging file/LUAD_Neigh_45_3_TPM.matrix.csv_pii_values_x.csv",row.names=1)
combined<-read.csv("E/Merging file/combined.csv",row.names=1)
combined<-read.csv("E:/Merging file/combined.csv",row.names=1)
columns_of_interest<-match(rownames(combined),colnames(pii_val))
pii<-pii_val[,columns_of_interest]
d<-500
a<-matrix(0,d,d)
system.time(for (i in 2:(d-1))
for (j in (i+1):d)
a[i,j]<-JSD1(pii[,i],pii[,j])
)
log2i<-function(p)
# Special function that returns 0  if log2 argument is 0
ifelse(log2(p)=="-Inf",0,p)
JSD1<-function(P,Q)
0.5*sum(P*log2i(P))+0.5*sum(Q*log2i(Q))-0.5*sum((P+Q)*log2i((P+Q)/2))
d<-500
a<-matrix(0,d,d)
system.time(for (i in 2:(d-1))
for (j in (i+1):d)
a[i,j]<-JSD1(pii[,i],pii[,j])
)
a1<-a
class(a)
class(pii)
pii_mat<-as.matrix(pii)
a[,1]
a[1,1]
a[1,2]
colnames(a)
View(a)
system.time(for (i in 1:(d-1))
a<-matrix(0,d,d)
d<-500
a<-matrix(0,d,d)
system.time(for (i in 1:(d-1))
for (j in (i+1):d)
a[i,j]<-JSD1(pii_mat[,i],pii_mat[,j])
)
a[,1]
View(a)
a[1,]
max(a)
min(a)
hist(a)
?heatmap
rownames(a)[1:d]<-colnames(pii)[1:d]
rownames(a)
dimnames(a)[1:d]<-colnames(pii)[1:d]
colnames(a)[1:d]<-colnames(pii)[1:d]
View(a)
hclust(a)
?hclust
hclust(a,method=singld)
hclust(a,method=single)
heatmap(a)
?heatmap
heatmap(a,ColV=NULL)
a1<-a
d<-50
a<-matrix(0,d,d)
for (i in 1:(d-1))
for (j in (i+1):d)
{
a[i,j]<-JSD1(pii_mat[,i],pii_mat[,j])
a[j,i]<-a[i,j]
}
View(a)
hclust(a)
heatmap(a)
for (i in 1:(d-1))
for (j in (i+1):d)
{
a1[j,i]<-a1[i,j]
}
dim(a1)
View(a1)
heatmap(a)
heatmap(a1)
heatmap(a)
a1
dim(a1)
View(a1)
plot(hclust(a1))
plot(hclust(as.dist(a1)))
dim(pii)
pii[1:5,1:5]
a1[1:5,1:5]
samp_pii <- pii[,1:500]
samp_pii[1:5,1:5]
dim(samp_pii)
1-cor(samp_pii) -> x1
dim(x1)
plot(hclust(as.dist(x1)))
h1<- hclust(as.dist(x1))
h1$labels
cutree(h1,k = 4) -> c1
c1
x1
dim(x1)
heatmap(x1)
require(gplots2)
require(gplots)
heatmap.2(samp_pii, distfun = function(x) {1-cor(x)})
heatmap.2(as.matrix(samp_pii), distfun = function(x) {1-cor(x)})
samp_pii
heatmap.2(as.matrix(samp_pii))
heatmap.2(as.matrix(samp_pii), trace = "none")
heatmap.2(as.matrix(samp_pii), trace = "none", color=redgreen)
heatmap.2(as.matrix(samp_pii), trace = "none", col = "redgreen")
heatmap.2(as.matrix(samp_pii), trace = "none", col = "redgreen", distfun = function(x) {as.dist(1-cor(x))})
heatmap.2(as.matrix(samp_pii), trace = "none", col = "redgreen", distfun = function(x) {as.dist(1-cor(t(x)))})
heatmap.2(as.matrix(log(samp_pii)), trace = "none", col = "redgreen", distfun = function(x) {as.dist(1-cor(t(x)))})
heatmap.2(as.matrix(log(samp_pii+0.1)), trace = "none", col = "redgreen", distfun = function(x) {as.dist(1-cor(t(x)))})
heatmap.2(as.matrix(log(samp_pii+0.01)), trace = "none", col = "redgreen", distfun = function(x) {as.dist(1-cor(t(x)))})
heatmap.2(x1, Rowv = NA, Colv = NA)
heatmap(x1)
heatmap(x1, Rowv = NA, Colv = NA )
heatmap(x1, Rowv = NA )
savehistory("C:/Users/Udi/Google Drive/Columbia/LAB/Rabadan/SC-TDA/Udi/histogramHistory.Rhistory")
